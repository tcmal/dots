#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results silent
#+STARTUP: content

* Preliminary

** Startup settings

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024))
#+end_src

** Package repositories

Using straight.el

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Custom

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file t)
#+end_src

** setup.el

#+begin_src emacs-lisp
(straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
(require 'setup)

;; (defun dw/log-require (&rest args)
;;   (with-current-buffer (get-buffer-create "*require-log*")
;;     (insert (format "%s\n"
;;                     (file-name-nondirectory (car args))))))
;; (add-to-list 'after-load-functions #'dw/log-require)
#+end_src

*** :pkg

#+begin_src emacs-lisp
(setup-define :pkg
  (lambda (recipe)
    `(unless (straight-use-package ',recipe)
       ,(setup-quit)))
  :documentation
  "Install RECIPE with `straight-use-package'.
This macro can be used as HEAD, and will replace itself with the
first RECIPE's package."
  :repeatable t
  :shorthand (lambda (sexp)
               (let ((recipe (cadr sexp)))
                 (if (consp recipe)
                     (car recipe)
                   recipe))))
#+end_src
                               
*** :load-after

From [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#load-after][David Wilson]]

#+begin_src emacs-lisp
(setup-define :load-after
  (lambda (features &rest body)
    (let ((body `(progn
                   (require ',(setup-get 'feature))
                   ,@body)))
      (dolist (feature (if (listp features)
                           (nreverse features)
                         (list features)))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES."
  :indent 1)
#+end_src

** No littering

#+begin_src emacs-lisp
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory)
      backup-directory-alist `(("." . "~/.cache/emacs/saves"))
      create-lockfiles nil)

(setup (:pkg no-littering))
#+end_src

* Looks

** Disable ugly stuff

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(menu-bar-mode -1)          ; Disable the menu bar
(set-fringe-mode 10)        ; Give some breathing room
#+end_src

** Font Configuration

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Mono" :height 128)
(set-face-attribute 'variable-pitch nil :font "Roboto" :height 128)
#+end_src

** Line numbers

#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

(setup display-line-numbers-mode
  (:hook-into text-mode-hook prog-mode-hook conf-mode-hook))

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

** Theme

The custom theme is generated by my NixOS config, but it uses the =base16-theme= package.

#+begin_src emacs-lisp
(setup (:pkg base16-theme)
  (load-theme 'base16-one-light))
#+end_src

** Modeline

#+begin_src emacs-lisp
(setup (:pkg doom-modeline)
  (:option doom-modeline-height 35
           doom-modeline-bar-width 6
           doom-modeline-lsp t
           doom-modeline-major-mode-icon nil
           doom-modeline-buffer-encoding nil
           doom-modeline-percent-position '(-3 ""))
  (doom-modeline-mode 1)
  (line-number-mode 0)
  (column-number-mode 0))
#+end_src

*** Diminish

#+begin_src emacs-lisp
(setup (:pkg diminish))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
(setup (:pkg rainbow-delimiters)
  (:hook-into prog-mode))
#+end_src

** Highlight matching braces

#+begin_src emacs-lisp
(setup (:require paren)
  (show-paren-mode 1))
#+end_src

** Solaire mode

#+begin_src emacs-lisp
(setup (:pkg solaire-mode)
  (solaire-global-mode +1))
#+end_src

** Splash screen

Inspired by https://github.com/rougier/emacs-splash

#+begin_src emacs-lisp
(defun splash-screen ()
  (interactive)
  (if (get-buffer "*splash*") (kill-buffer "*splash*") nil)
  (let* ((splash-buffer (get-buffer-create "*splash*"))
         (height (window-total-height))
         (width (window-total-width nil))
         (padding-top (/ height 4)))
    (with-current-buffer splash-buffer
      (erase-buffer)

      (if (one-window-p)
          (setq mode-line-format nil))
      (setq cursor-type nil)
      (blink-cursor-mode 0)
      (setq visible-cursor nil)
      (setq vertical-scroll-bar nil)
      (setq horizontal-scroll-bar nil)
      (setq fill-column width)

      (insert-char ?\n padding-top)

    (dolist (line (s-split "\n"(shell-command-to-string "fortune hitchhiker humorists ascii-art")))
                        (insert (propertize line 'face 'doom-modeline-panel))
                        (center-line)
                        (insert "\n"))

      (goto-char 0)
      (read-only-mode t)

      (display-buffer-same-window splash-buffer nil)
      (local-set-key "q" 'kill-this-buffer))))

(add-to-list 'after-init-hook 'splash-screen)
    #+end_src

* Help

** Which Key

#+begin_src emacs-lisp
(setup (:pkg which-key)
  (which-key-mode)
  (diminish 'which-key-mode)
  (setq which-key-idle-delay 0.3))
#+end_src

** Helpful

#+begin_src emacs-lisp
(setup (:pkg helpful)
  (:global
   [remap describe-function] helpful-function
   [remap describe-symbol] helpful-symbol
   [remap describe-variable] helpful-variable
   [remap describe-key] helpful-key
   [remap describe-command] helpful-describe-command))
#+end_src

* Keybindings

#+begin_src emacs-lisp
(setup (:pkg general)
  (general-evil-setup)
  (general-auto-unbind-keys))
#+end_src

** ESC to quit

#+begin_src emacs-lisp
(general-define-key
 "<escape>" 'keyboard-escape-quit)
#+end_src

** SPC-

#+begin_src emacs-lisp
(general-create-definer mal/leader-keys
  :keymaps '(normal visual emacs)
  :prefix "SPC"
  :global-prefix "C-SPC")
(mal/leader-keys
  "q q" '(save-buffers-kill-emacs :which-key "quit")
  "j" '(evil-switch-to-windows-last-buffer :which-key "last buffer")
  "w" '(evil-window-map :which-key "windows")
  "m" '(switch-to-next-buffer :which-key "next buffer")
  "n" '(switch-to-prev-buffer :which-key "prev buffer")
  "c c" (lambda () (interactive)
          (projectile-persp-switch-project "~/code/dots")
          (find-file (expand-file-name "~/code/dots/emacs.org"))))
#+end_src

** Text Scaling

#+begin_src emacs-lisp
(setup (:pkg hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (general-define-key
   "C-=" '(hydra-text-scale/body :which-key "scale text")))
#+end_src

* Navigation & Management

** File open preferences

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
(setq large-file-warning-threshold nil)
(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src

** Projectile

#+begin_src emacs-lisp
(setup (:pkg projectile)
  (diminish 'projectile-mode)
  (projectile-mode)
  (:option projectile-sort-order 'recentf
           projectile-project-search-path '("~/code")
           projectile-switch-project-action #'projectile-find-file
           projectile-use-git-grep t)
  (add-to-list 'projectile-project-root-files ".stfolder")
  (mal/leader-keys
    "SPC" 'projectile-find-file
    "p" '(projectile-command-map :which-key "projectile")))
#+end_src

** Workspaces

#+begin_src emacs-lisp
(setup (:pkg perspective)
  (:option persp-initial-frame-name "Main")
  (unless (equal persp-mode t)
    (persp-mode))
  (mal/leader-keys
    "TAB l" 'persp-next
    "TAB h" 'persp-prev
    "TAB TAB" 'persp-switch
    "TAB k" 'persp-kill))

(setup (:pkg persp-projectile)
  (general-define-key :keymaps 'projectile-command-map
                      "p" 'projectile-persp-switch-project))
#+end_src

** Vertico

#+begin_src emacs-lisp
(setup (:pkg vertico)
  (vertico-mode)
  (:with-map vertico-map
    (:bind "C-j" vertico-next
           "C-k" vertico-previous))
  (:option vertico-cycle t))

(setup (:pkg orderless)
  (:option completion-styles '(orderless basic partial-completion emacs22)
           completion-ignore-case t))

(setup (:pkg savehist)
  (savehist-mode))

(setup (:pkg marginalia)
  (:load-after vertico)
  (:option marginalia-annotators '(marginalia-annotators-heavy
                                   marginalia-annotators-light nil))
  (marginalia-mode))
#+end_src

** Consult

#+begin_src emacs-lisp
(setup (:pkg consult)
  (mal/leader-keys
    "e" '(flycheck-list-errors :which-key "errors")
    "h" '(flycheck-next-error :which-key "next error")
    "f" '(find-file :which-key "find file")
    "s" '(consult-line :which-key "line search")
    "d" '(consult-imenu :which-key "imenu")
    "b" '(consult-buffer :which-key "switch buffer")))
#+end_src

* Evil

#+begin_src emacs-lisp
(setup (:pkg evil)
  (:option 
   evil-want-integration t
   evil-want-keybinding nil
   evil-want-C-u-scroll t
   evil-want-C-d-scroll t
   evil-want-C-i-jump nil)
  (evil-mode 1)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(general-define-key :states 'normal
                    :keymaps 'override
                    "C-s" 'save-buffer
                    "u" 'undo-fu-only-undo
                    "C-r" 'undo-fu-only-redo
                    "C-w" 'kill-current-buffer
                    "C-p" 'mal/paste-dwim)
(general-define-key :states 'insert
                    :keymaps 'override
                    "C-g" 'evil-normal-state
                    "C-s" 'mal/save-normal
                    "C-p" 'mal/paste-dwim)
(general-define-key :states 'motion
                    "j" 'evil-next-visual-line
                    "k" 'evil-previous-visual-line)

(defun mal/save-normal ()
  (interactive)
  (save-buffer)
  (evil-normal-state))

#+end_src

** Undo Functionality

#+begin_src emacs-lisp
(setup (:pkg undo-fu)
  (setq evil-undo-system 'undo-fu))
#+end_src

* Org Mode

#+begin_src emacs-lisp
(setup (:pkg org)
  (:option
   org-directory "~/notes/"
   org-startup-indented t
   org-confirm-babel-evaluate nil
   org-startup-with-inline-images t
   org-startup-with-latex-preview t
   org-hide-emphasis-markers t
   org-ascii-headline-spacing 1.4
   org-image-actual-width '(600)
   org-goto-interface 'outline-path-completion
   org-fontify-quote-and-verse-blocks t
   org-src-preserve-indentation t
   org-ellipsis " ▾"
   org-cycle-separator-lines -1
   org-M-RET-may-split-line nil
   org-preview-latex-image-directory (expand-file-name "~/.cache/emacs/ltximg/")
   org-format-latex-options '(:foreground default :background default :scale 1.5 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                                          ("begin" "$1" "$" "$$" "\\(" "\\["))
   org-log-into-drawer t)
  (:hook mal/org-mode-setup)
  (:also-load org-tempo)
  (add-hook 'org-tab-first-hook 'org-end-of-line))
#+end_src

** Keybinds

#+begin_src emacs-lisp
(setup (:pkg evil-org)
  (:load-after org)
  (:hook-into org-mode org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-set-key-theme '(navigation todo insert textobjects additional))
  (evil-org-agenda-set-keys))

(mal/leader-keys
  "o" '(org-agenda :which-key "agenda"))
(general-define-key :states '(normal insert)
                    :keymaps 'org-mode-map
                    "C-j" 'org-next-visible-heading
                    "C-k" 'org-previous-visible-heading
                    "M-h" 'org-do-promote
                    "M-l" 'org-do-demote
                    "M-j" 'org-metadown
                    "M-k" 'org-metaup
                    "M-S-h" 'org-promote-subtree
                    "M-S-l" 'org-demote-subtree
                    "<M-return>" (lambda (&rest _) (interactive) (+org/meta-return-dwim) (evil-append 1))
                    "<M-S-return>" (lambda (&rest _)
                                     (interactive)
                                     (org-insert-heading-respect-content)
                                     (evil-append 1)))
(general-define-key :states 'motion
                    :keymaps 'org-mode-map
                    "RET" '+org/dwim-at-point)
  #+end_src

*** ALT-RET DWIM

#+begin_src emacs-lisp
(defun +org/meta-return-dwim (&rest _)
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    ;; skip over unimportant contexts
    (while (and context (memq type '(verbatim code bold italic underline strike-throug subscript superscript)))
      (setq context (org-element-property :parent context
                                          type (org-element-type context))))
    (pcase type
      (`headline
       (cond ((or (org-element-property :todo-type context)
                  (org-element-property :scheduled context))
              (evil-org-org-insert-todo-heading-respect-content-below))
             (t (org-meta-return))))
      (_ (org-meta-return)))))
#+end_src

*** RET DWIM

From [[https://github.com/hlissner/doom-emacs/blob/master/modules/lang/org/autoload/org.el][DOOM Emacs]]

#+begin_src emacs-lisp
(defun +org/dwim-at-point (&optional arg)
  "Do-what-I-mean at point.
If on a:
- checkbox list item or todo heading: toggle it.
- headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
  subtree; update statistics cookies/checkboxes and ToCs.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive "P")
  (if (button-at (point))
      (call-interactively #'push-button)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-throug subscript superscript)))
        (setq context (org-element-property :parent context
                                            type (org-element-type context))))
      (pcase type
        ((or `citation `citation-reference)
         (org-cite-follow context arg))

        (`headline
         (cond ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                         'todo)
                   'done))))
         ;; Update any metadata or inline previews in this subtree
         (org-update-checkbox-count)
         (org-update-parent-todo-statistics)
         (when (and (fboundp 'toc-org-insert-toc)
                    (member "TOC" (org-get-tags)))
           (toc-org-insert-toc)
           (message "Updating table of contents"))
         (let* ((beg (if (org-before-first-heading-p)
                         (line-beginning-position)
                       (save-excursion (org-back-to-heading) (point))))
                (end (if (org-before-first-heading-p)
                         (line-end-position)
                       (save-excursion (org-end-of-subtree) (point))))
                (overlays (ignore-errors (overlays-in beg end)))
                (latex-overlays
                 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                             overlays))
                (image-overlays
                 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                             overlays)))
           (+org--toggle-inline-images-in-subtree beg end)
           (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate arg)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ((or `src-block `inline-src-block)
         (org-babel-execute-src-block arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--toggle-inline-images-in-subtree
                (org-element-property :begin lineage)
                (org-element-property :end lineage))
             (org-open-at-point arg))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           (+org--toggle-inline-images-in-subtree
            (org-element-property :begin context)
            (org-element-property :end context))))))))

(defun +org-get-todo-keywords-for (&optional keyword)
  "Returns the list of todo keywords that KEYWORD belongs to."
  (when keyword
    (cl-loop for (type . keyword-spec)
             in (cl-remove-if-not #'listp org-todo-keywords)
             for keywords =
             (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                     (match-string 1 x)
                                   x))
                     keyword-spec)
             if (eq type 'sequence)
             if (member keyword keywords)
             return keywords)))

(defun +org--toggle-inline-images-in-subtree (&optional beg end refresh)
  "Refresh inline image previews in the current heading/tree."
  (let ((beg (or beg
                 (if (org-before-first-heading-p)
                     (line-beginning-position)
                   (save-excursion (org-back-to-heading) (point)))))
        (end (or end
                 (if (org-before-first-heading-p)
                     (line-end-position)
                   (save-excursion (org-end-of-subtree) (point)))))
        (overlays (cl-remove-if-not (lambda (ov) (overlay-get ov 'org-image-overlay))
                                    (ignore-errors (overlays-in beg end)))))
    (dolist (ov overlays nil)
      (delete-overlay ov)
      (setq org-inline-image-overlays (delete ov org-inline-image-overlays)))
    (when (or refresh (not overlays))
      (org-display-inline-images t t beg end)
      t)))
#+end_src

** Looks

*** Fonts

#+begin_src emacs-lisp
(setup org-indent
  (:when-loaded
    (set-face-attribute 'org-document-title nil :font "Roboto" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Roboto" :weight 'medium :height (cdr face)))

    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'org-code)
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch) :height 0.6)
    (set-face-attribute 'org-drawer nil :inherit '(shadow fixed-pitch) :height 0.6)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)))
#+end_src

*** Bulletpoints

#+begin_src emacs-lisp
(setup (:pkg org-superstar)
  (:load-after org)
  (:hook-into org-mode)
  (:option
   org-superstar-remove-leading-stars t
   org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Appear

#+begin_src emacs-lisp
(setup (:pkg org-appear)
  (:hook-into org-mode))
#+end_src

*** Column

#+begin_src emacs-lisp
(setup (:pkg visual-fill-column)
  (:hook-into org-mode org-agenda-mode)
  (:option visual-fill-column-width 110
           visual-fill-column-center-text t))
#+end_src

*** File load hook

#+begin_src emacs-lisp
(defun mal/org-mode-setup ()
  (interactive)
  (org-indent-mode)
  (if (s-contains? "dashboard" (buffer-file-name))
      (progn (org-superstar-mode 0)
             (mu4e-dashboard-mode)
             (evil-emacs-state))
    (variable-pitch-mode)
    (visual-line-mode 1)
    (auto-fill-mode 0)
    (display-line-numbers-mode 0)
    (text-scale-set 1)
    (setq line-spacing 3)))
#+end_src

** Task States

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "|" "DONE(d!)")
        (sequence "|" "BACK(b)")))

(setq org-todo-keyword-faces
      '(("NEXT" . (:foreground "orange red" :weight bold))
        ("WAIT" . (:foreground "HotPink2" :weight bold))
        ("BACK" . (:foreground "MediumPurple3" :weight bold))))

(setq org-tag-alist
      '((:startgroup)
        (:endgroup)
        ("@home" . ?H)
        ("@school" . ?W)
        ("@societies" . ?W)
        ("@career" . ?W)))

#+end_src

** Agenda

#+begin_src emacs-lisp
(defun mal/task-scheduling-info ()
  (let* ((deadline (org-get-deadline-time (point)))
         (scheduled (org-get-scheduled-time (point)))
         (time (or scheduled deadline)))
    (cond (time (format-time-string "%a %d %b" time))
          (t ""))))

(setup (:pkg org-super-agenda)
  (:load-after org)
  (:option org-super-agenda-header-map (make-sparse-keymap)
           org-super-agenda-groups '((:name "School"
                                            :tag "@school")
                                     (:name "Societies"
                                            :tag "@societies")
                                     (:name "Home"
                                            :tag "@home"))
           org-agenda-sorting-strategy '((agenda priority-down timestamp-up category-keep)
                                         (todo priority-down timestamp-up category-keep)
                                         (tags priority-down time-up timestamp-up category-keep)
                                         (search priority-down timestamp-up category-keep))
           org-agenda-window-setup 'current-window
           org-agenda-span 'day
           org-agenda-start-with-log-mode t
           org-agenda-remove-tags t
           org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                      (timeline . "%i %c %s")
                                      (todo . " %i %-12:c %-12:(mal/task-scheduling-info)")
                                      (tags . " %i %-12:c%?-12t% s")
                                      (search . " %i %-12:c?-12t% s"))
           org-agenda-custom-commands `(("d" "Dashboard"
                                         ((agenda "" ((org-deadline-warning-days 3)
                                                      (org-super-agenda-groups (cons '(:name "Today"
                                                                                             :time-grid t
                                                                                             :scheduled "today")
                                                                                     org-super-agenda-groups))))
                                          (tags-todo "+PRIORITY=\"A\""
                                                     ((org-agenda-overriding-header "High Priority")))
                                          (todo "NEXT"
                                                ((org-agenda-overriding-header "Next Actions")))
                                          (todo "TODO"
                                                ((org-agenda-overriding-header "Backlog")))))

                                        ("n" "Next Tasks"
                                         ((todo "NEXT"
                                                ((org-agenda-overriding-header "Next Tasks")
                                                 ))
                                          (agenda "" ((org-deadline-warning-days 0)
                                                      (org-super-agenda-groups (cons '(:name "Today"
                                                                                             :time-grid t
                                                                                             :scheduled "today")
                                                                                     org-super-agenda-groups))
                                                      (org-scheduled-past-days 1)
                                                      (org-deadline-past-days 1))))))
           org-columns-default-format "%TODO %25ITEM %DEADLINE %SCHEDULED")
  (org-super-agenda-mode 1)
  (:with-mode org-agenda-mode
    (:hook (lambda () (display-line-numbers-mode 0)))))
#+end_src

** Habits

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit t)
#+end_src

** Snippets

#+begin_src emacs-lisp
(setup org-tempo
  (:when-loaded
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))))
#+end_src

** Paste clipboard image

#+begin_src emacs-lisp
(defun org-insert-clipboard-image ()
  "Insert an image from the clipboard, placing the png in the same directory and inserting a link into the current (org) document"
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-nondirectory (buffer-file-name))
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (shell-command (concat "xclip -l 0 -selection clipboard -t image/png -o > \"" filename "\""))
  (insert (concat "[[./" filename "]]"))
  (org-display-inline-images))
#+end_src

** Babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
'org-babel-load-languages
'((emacs-lisp . t)
    (python . t)))
#+end_src

** Auto-Tangle configuration file

#+begin_src emacs-lisp
(defun mal/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/code/dots/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle-file (buffer-file-name)))))

(setup org-mode
  (:hook (lambda () (add-hook 'after-save-hook #'mal/org-babel-tangle-config))))
#+end_src

** Presentations

#+begin_src emacs-lisp
(setup (:pkg org-present))
#+end_src

* Development

** Direnv

#+begin_src emacs-lisp
(setup (:pkg direnv)
  (:option direnv-always-show-summary nil)
  (direnv-mode))
#+end_src

** Language Servers

#+begin_src emacs-lisp
(setenv "LSP_USE_PLISTS" "true")
(setup (:pkg lsp-mode)
  (:option read-process-output-max (* 3 1024 1024)
           lsp-keymap-prefix "C-l"
           lsp-lens-enable nil
           lsp-use-plists t
           lsp-signature-render-documentation nil
           lsp-idle-delay 0.5
           lsp-enable-which-key-integration t)
  (:with-hook (js-mode-hook python-mode-hook)
    (:hook 'lsp))
  (mal/leader-keys
    "l a" 'lsp-execute-code-action
    "l r" 'lsp-rename
    "l f s" 'lsp-ui-find-workspace-symbol
    "l f d" 'lsp-find-definition
    "l f r" 'lsp-find-references
    "l f c" 'lsp-find-declaration))
#+end_src

*** LSP UI

#+begin_src emacs-lisp
(setup (:pkg lsp-ui)
  (:hook-into lsp-mode)
  (:option lsp-ui-doc-position 'bottom
           lsp-ui-sideline-show-hover nil
           lsp-ui-sideline-show-diagnostics t
           lsp-ui-sideline-show-code-actions t
           lsp-ui-doc-enable t
           lsp-ui-doc-show-with-cursor t
           lsp-ui-doc-delay 1
           lsp-ui-peek-always-show t))
#+end_src

*** Flycheck

#+begin_src emacs-lisp
(setup (:pkg flycheck)
  (global-flycheck-mode))
#+end_src

*** Completion

#+begin_src emacs-lisp
(setup (:pkg corfu)
  (:option corfu-cycle t
           corfu-auto t)
  (:hook-into prog-mode shell-mode eshell-mode)
  (general-define-key :keymaps 'corfu-map
                      "C-j" 'corfu-next
                      "C-k" 'corfu-previous))
#+end_src

** Indentation / Whitespace

#+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)
(setup (:pkg ws-butler)
  (:hook-into text-mode prog-mode))
#+end_src

** Commenting

#+begin_src emacs-lisp
(setup (:pkg evil-nerd-commenter)
  (:global "C-/" evilnc-comment-or-uncomment-lines))
#+end_src

** Brackets

#+begin_src emacs-lisp
(setup (:pkg smartparens)
  (require 'smartparens-config)
  (:with-mode smartparens-mode
    (:hook-into prog-mode)))
#+end_src

** Magit

#+begin_src emacs-lisp
(setup (:pkg magit)
  (mal/leader-keys
    "g g" '(magit-status :which-key "git status")))
#+end_src

*** Easy Syncing

I don't use this for code, just for org tasks. Code from [[https://old.reddit.com/r/emacs/comments/rw0ijd/magit_how_to_check_for_changes_in_git_repo/hr9cqgs/][here]].

#+begin_src emacs-lisp
(defun git-status (repo-path)
  (let ((default-directory (locate-dominating-file
                            repo-path ".git")))
    (with-output-to-string
      (with-current-buffer standard-output
        (call-process "git" nil t nil "status" "--porcelain")))))
(defun git-is-dirty (repo-path)
  (not (string-blank-p (git-status repo-path))))

(defun git-sync (repo-path)
  (when (git-is-dirty repo-path)
    (let ((default-directory repo-path))
      (message (with-output-to-string
                 (with-current-buffer standard-output
                   (call-process "git-sync" nil t nil)))))))

(defun git-sync-notes ()
  (interactive)
  (git-sync (expand-file-name "~/notes")))

(defun sync-mail ()
  (interactive)
  (call-process (expand-file-name "~/.bin/sync-mail")))

(add-hook 'kill-emacs-hook 'git-sync-notes)
(add-hook 'kill-emacs-hook 'sync-mail)
#+end_src

** Rust

#+begin_src emacs-lisp
(setup (:pkg rustic)
  (:option rustic-format-on-save nil))
#+end_src

** Haskell

#+begin_src emacs-lisp
(setup (:pkg haskell-mode)
  (:hook lsp))

(setup (:pkg lsp-haskell))
#+end_src

** Nix

#+begin_src emacs-lisp
(setup (:pkg nix-mode)
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode)))
#+end_src

** Typescript

#+begin_src emacs-lisp
(setup (:pkg typescript-mode))
#+end_src

** Svelte

#+begin_src emacs-lisp
(setup (:pkg svelte-mode))
#+end_src

** Terminal

#+begin_src emacs-lisp
(setq term-prompt-regexp "^.*❯❯❯ ")
#+end_src

** HTML

#+begin_src emacs-lisp
(setup (:pkg web-mode)
  (:option web-mode-markup-indent-offset 2
           web-mode-enable-auto-pairing t
           web-mode-engines-alist
           '(("django"    . "\\.njk\\'"))
           )
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.njk\\'" . web-mode)))

(setup (:pkg emmet-mode)
  (:hook-into sgml-mode-hook))
(setq sgml-quick-keys 'close)
#+end_src

** YAML

#+begin_src emacs-lisp
(setup (:pkg yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

** Go

#+begin_src emacs-lisp
(setup (:pkg go-mode))
#+end_src

** Latex

#+begin_src emacs-lisp
(setup tex-mode
  :hook 'mal/tex-mode-setup)

(defun mal/tex-mode-setup ()
  (interactive)
  (flyspell-mode 1)
  (variable-pitch-mode)
  (visual-fill-column-mode 1)
  (setq word-wrap t)
  (visual-line-mode 1)
  (auto-fill-mode 0)
  (display-line-numbers-mode 0)
  (text-scale-set 1)
  (set-face-attribute 'font-lock-keyword-face nil :inherit 'fixed-pitch)
  (set-face-attribute 'font-lock-function-name-face nil :inherit 'fixed-pitch)
  (setq line-spacing 3))
#+end_src

*  Other

** EasyPG

#+begin_src emacs-lisp
(setq epa-pinentry-mode 'loopback)
(setenv "GPG_AGENT_INFO" (concat "/run/user/" (number-to-string (user-uid)) "/gnupg/S.gpg-agent"))
#+end_src

** Ledger

#+begin_src emacs-lisp
(setup (:pkg hledger-mode)
  (:option hledger-jfile (expand-file-name "~/notes/Tasks/Ledger.ledger.gpg")))
#+end_src

** Email

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(require 'mu4e)
(setq mu4e-contexts
      `(,(make-mu4e-context
          :name "personal"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/personal" (mu4e-message-field msg :maildir))))
          :vars '(
                  (user-mail-address . "oscar.shrimpton.personal@gmail.com")
                  (user-full-name . "Aria Shrimpton")
                  (mu4e-get-mail-command "mbsync personal")
                  (mu4e-sent-folder . "/personal/[Gmail]/Sent Mail")
                  (mu4e-drafts-folder . "/personal/[Gmail]/Drafts")
                  (mu4e-trash-folder . "/personal/[Gmail]/Trash")
                  (mu4e-refile-folder . "/personal/[Gmail]/Archive")))
        ,(make-mu4e-context
          :name "compsoc"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/compsoc" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "vicepresident@comp-soc.com")
                  (user-full-name . "Oscar Shrimpton")
                  (mu4e-get-mail-command "mbsync compsoc")
                  (mu4e-sent-folder . "/compsoc/[Gmail]/Sent Mail")
                  (mu4e-drafts-folder . "/compsoc/[Gmail]/Drafts")
                  (mu4e-trash-folder . "/compsoc/[Gmail]/Trash")
                  (mu4e-refile-folder . "/compsoc/[Gmail]/Archive")))
        ,(make-mu4e-context
          :name "student"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/student" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "s2080441@ed.ac.uk")
                  (user-full-name . "Aria Shrimpton")
                  (mu4e-get-mail-command "mbsync student")
                  (mu4e-sent-folder . "/student/Sent")
                  (mu4e-drafts-folder . "/student/Drafts")
                  (mu4e-trash-folder . "/student/Trash")
                  (mu4e-refile-folder . "/student/Archive")))
        ,(make-mu4e-context
          :name "staff"
          :match-func (lambda (msg) (when msg
                                      (string-prefix-p "/staff" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "oshrimpt@ed.ac.uk")
                  (mu4e-get-mail-command "mbsync staff")
                  (user-full-name . "Oscar Shrimpton")
                  (mu4e-sent-folder . "/staff/Sent")
                  (mu4e-drafts-folder . "/staff/Drafts")
                  (mu4e-trash-folder . "/staff/Trash")
                  (mu4e-refile-folder . "/staff/Archive")))))

(general-define-key
 :keymaps 'mu4e-main-mode-map
 :states 'normal
 "f" 'mu4e~headers-jump-to-maildir)

(setq mu4e-headers-leave-behavior 'apply
      mu4e-sent-folder "/personal/[Gmail]/Sent Mail"
      mu4e-drafts-folder "/personal/[Gmail]/Drafts"
      sendmail-program "/usr/bin/msmtp"
      send-mail-function 'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function 'message-send-mail-with-sendmail
      mu4e-maildir-shortcuts '(("/personal/Inbox" . ?a)
                               ("/compsoc/Inbox" . ?s)
                               ("/student/Inbox" . ?d)
                               ("/staff/Inbox" . ?f))
      mu4e-bookmarks '((:name "All Inboxes" :query "maildir:/personal/Inbox or maildir:/compsoc/Inbox or maildir:/student/Inbox or maildir:/staff/Inbox" :key 112))
      mu4e-confirm-quit nil)

(straight-use-package
 '(mu4e-dashboard :type git :host github :repo "rougier/mu4e-dashboard"))

(evil-set-initial-state 'mu4e-main-mode 'emacs)
                            #+end_src


** Evil Collection

#+begin_src emacs-lisp
(setup (:pkg evil-collection)
  (:load-after evil)
  (evil-collection-init))
#+end_src
