#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results none
#+STARTUP: content

* Preliminary

** Package repositories

Using straight.el

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Custom

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load-file custom-file)
#+end_src

** setup.el

#+begin_src emacs-lisp
(straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
(require 'setup)
#+end_src

*** :pkg

#+begin_src emacs-lisp
(setup-define :pkg
  (lambda (recipe)
    `(unless (straight-use-package ',recipe)
       ,(setup-quit)))
  :documentation
  "Install RECIPE with `straight-use-package'.
This macro can be used as HEAD, and will replace itself with the
first RECIPE's package."
  :repeatable t
  :shorthand (lambda (sexp)
               (let ((recipe (cadr sexp)))
                 (if (consp recipe)
                     (car recipe)
                   recipe))))
#+end_src
                               
*** :load-after

From [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#load-after[David Wilson]]]

#+begin_src emacs-lisp
(setup-define :load-after
  (lambda (features &rest body)
    (let ((body `(progn
                   (require ',(setup-get 'feature))
                   ,@body)))
      (dolist (feature (if (listp features)
                           (nreverse features)
                         (list features)))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES."
  :indent 1)
#+end_src

** No littering

#+begin_src emacs-lisp
(setup (:pkg no-littering))
#+end_src

* Looks

** Disable ugly stuff

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(menu-bar-mode -1)          ; Disable the menu bar
(set-fringe-mode 10)        ; Give some breathing room
#+end_src

** Font Configuration

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Mono" :height 128)
(set-face-attribute 'variable-pitch nil :font "Roboto" :height 128)
#+end_src

** Line numbers

#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

** Theme

The custom theme is generated by my NixOS config, but it uses the =base16-theme= package.

#+begin_src emacs-lisp
(setup (:pkg base16-theme)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory "~/.emacs.d/themes"))
  (load-theme 'base16-custom))
#+end_src

** Modeline

#+begin_src emacs-lisp
(setup (:pkg doom-modeline)
  (doom-modeline-mode 1)
  (:option doom-modeline-height 35
           doom-modeline-buffer-encoding nil))
#+end_src

*** Diminish

#+begin_src emacs-lisp
(setup (:pkg diminish))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
(setup (:pkg rainbow-delimiters)
  (:hook-into prog-mode))
#+end_src

* Help

** Which Key

#+begin_src emacs-lisp
(setup (:pkg which-key)
  (which-key-mode)
  (diminish 'which-key-mode)
  (setq which-key-idle-delay 0.3))
#+end_src

** Helpful

#+begin_src emacs-lisp
(setup (:pkg helpful)
  (:option
   counsel-describe-function-function #'helpful-callable
   counsel-describe-variable-function #'helpful-variable)
  (:global
   [remap describe-function] counsel-describe-function
   [remap describe-symbol] counsel-describe-symbol
   [remap describe-variable] counsel-describe-variable
   [remap describe-command] helpful-describe-command))
#+end_src

* General
** Counsel

#+begin_src emacs-lisp
(setup (:pkg counsel)
  (:global "M-x" counsel-M-x
           "C-x b" counsel-ibuffer
           "C-x C-f" counsel-find-file)
  (:with-map minibuffer-local-map
    (:bind "C-r" counsel-minibuffer-history)))
#+end_src

** Ivy

#+begin_src emacs-lisp
(setup (:pkg ivy)
  (diminish 'ivy-mode)
  (:with-map ivy-minibuffer-map
    (:bind "TAB" ivy-alt-done
           "C-l" ivy-alt-done
           "C-j" ivy-next-line
           "C-k" ivy-previous-line))
  (:with-map ivy-switch-buffer-map
    (:bind "C-k" ivy-previous-line
           "C-l" ivy-done
           "C-d" ivy-switch-buffer-kill))
  (:with-map ivy-reverse-i-search-map
    (:bind "C-k" ivy-previous-line
           "C-d" ivy-reverse-i-search-kill))
  (:option ivy-initial-inputs-alist nil)
  (ivy-mode 1))
#+end_src

*** Rich

#+begin_src emacs-lisp
(setup (:pkg ivy-rich)
  (ivy-rich-mode 1))
#+end_src

** Projectile

#+begin_src emacs-lisp
(setup (:pkg projectile)
  (diminish 'projectile-mode)
  (projectile-mode)
  (:option projectile-completion-system 'ivy
           projectile-sort-order 'recentf
           projectile-project-search-path '("~/code")
           projectile-switch-project-action #'projectile-find-file))

                                        ;(setup (:pkg counsel-projectile)
                                        ;  (counsel-projectile-mode))
#+end_src

** Company

#+begin_src emacs-lisp
(setup (:pkg company)
  (:hook-into lsp-mode)
  (:with-map company-active-map
    (:bind "<tab>" company-complete-selection))
  (:with-map lsp-mode-map
    (:bind "<tab>" company-indent-or-complete-common))
  (:option company-minimum-prefix-length 1
           company-idle-delay 0))

(setup (:pkg company-box)
  (:hook-into company-mode))
#+end_src

* Keybindings

#+begin_src emacs-lisp
(setup (:pkg general)
  (general-evil-setup))
#+end_src

** ESC to quit

#+begin_src emacs-lisp
(general-define-key
 "<escape>" 'keyboard-escape-quit)
#+end_src

** SPC-

#+begin_src emacs-lisp
(general-create-definer mal/leader-keys
  :keymaps '(normal insert visual emacs)
  :prefix "SPC"
  :global-prefix "C-SPC")
(mal/leader-keys
  "q q" '(save-buffers-kill-emacs :which-key "quit")
  "o" '(org-agenda :which-key "agenda")
  "g g" '(magit-status :which-key "git status")
  "p" '(projectile-command-map :which-key "projectile")
  "SPC" '(counsel-projectile :which-key "omnijump")
  "f" '(counsel-find-file :which-key "open file")
  "s" 'swiper
  "j" '(evil-switch-to-windows-last-buffer :which-key "last buffer")
  "w" '(evil-window-map :which-key "windows")
  "b" '(counsel-switch-buffer :which-key "switch buffer")
  "h" '(switch-to-next-buffer :which-key "next buffer")
  "l" '(switch-to-prev-buffer :which-key "prev buffer"))
#+end_src

** Text Scaling

#+begin_src emacs-lisp
(setup (:pkg hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (general-define-key
   "C-=" '(hydra-text-scale/body :which-key "scale text")))
#+end_src

* Evil

#+begin_src emacs-lisp
(setup (:pkg evil)
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-d-scroll t)
  (setq evil-want-C-i-jump nil)
  (evil-mode 1)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(general-define-key :states 'normal
                    :keymaps 'override
                    "C-s" 'save-buffer
                    "u" 'undo-fu-only-undo
                    "C-r" 'undo-fu-only-redo
                    "C-w" 'kill-current-buffer
                    "C-p" 'mal/paste-dwim)
(general-define-key :states 'insert
                    :keymaps 'override
                    "C-g" 'evil-normal-state
                    "C-s" (lambda () (interactive)
                            (save-buffer)
                            (evil-normal-state))
                    "C-p" 'mal/paste-dwim)
(general-define-key :states 'motion
                    "j" 'evil-next-visual-line
                    "k" 'evil-previous-visual-line)
#+end_src

** Evil Collection

#+begin_src emacs-lisp
(setup (:pkg evil-collection)
  (:load-after evil)
  (evil-collection-init))
#+end_src

** Undo Functionality

#+begin_src emacs-lisp
(setup (:pkg undo-fu)
  (setq evil-undo-system 'undo-fu))
#+end_src

* Org Mode

#+begin_src emacs-lisp
(setup (:pkg org)
  (:option
   org-directory "~/notes/"
   org-startup-indented t
   org-confirm-babel-evaluate nil
   org-startup-with-inline-images t
   org-startup-with-latex-preview t
   org-hide-emphasis-markers t
   org-ascii-headline-spacing 1.4
   org-image-actual-width '(300)
   org-goto-interface 'outline-path-completion
   org-fontify-quote-and-verse-blocks t
   org-src-preserve-indentation t
   org-ellipsis " ▾"
   org-cycle-separator-lines -1
   org-log-into-drawer t)
  (:hook mal/org-mode-setup)
  (:also-load org-tempo)
  (add-hook 'org-tab-first-hook 'org-end-of-line))
#+end_src

* Keybinds

#+begin_src emacs-lisp
(setup (:pkg org)
  (:with-map org-mode-map
    "C-j" 'org-next-visible-heading
    "C-k" 'org-previous-visible-heading
    "M-h" 'org-do-promote
    "M-l" 'org-do-demote
    "M-S-h" 'org-promote-subtree
    "M-S-l" 'org-demote-subtree)
  (general-define-key :states 'insert
                      :keymaps 'org-mode-map
                      "C-j" 'org-next-visible-heading
                      "C-k" 'org-previous-visible-heading
                      "M-h" 'org-do-promote
                      "M-l" 'org-do-demote
                      "M-S-h" 'org-promote-subtree
                      "M-S-l" 'org-demote-subtree)
  (general-define-key :states 'motion
                      :keymaps 'org-mode-map
                      "RET" '+org/dwim-at-point))
#+end_src

*** RET DWIM

From [[https://github.com/hlissner/doom-emacs/blob/master/modules/lang/org/autoload/org.el][DOOM Emacs]]

#+begin_src emacs-lisp
(defun +org/dwim-at-point (&optional arg)
  "Do-what-I-mean at point.
If on a:
- checkbox list item or todo heading: toggle it.
- headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
  subtree; update statistics cookies/checkboxes and ToCs.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive "P")
  (if (button-at (point))
      (call-interactively #'push-button)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-throug subscript superscript)))
        (setq context (org-element-property :parent context
                                            type (org-element-type context))))
      (pcase type
        ((or `citation `citation-reference)
         (org-cite-follow context arg))

        (`headline
         (cond ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                         'todo)
                   'done))))
         ;; Update any metadata or inline previews in this subtree
         (org-update-checkbox-count)
         (org-update-parent-todo-statistics)
         (when (and (fboundp 'toc-org-insert-toc)
                    (member "TOC" (org-get-tags)))
           (toc-org-insert-toc)
           (message "Updating table of contents"))
         (let* ((beg (if (org-before-first-heading-p)
                         (line-beginning-position)
                       (save-excursion (org-back-to-heading) (point))))
                (end (if (org-before-first-heading-p)
                         (line-end-position)
                       (save-excursion (org-end-of-subtree) (point))))
                (overlays (ignore-errors (overlays-in beg end)))
                (latex-overlays
                 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                             overlays))
                (image-overlays
                 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                             overlays)))
           (+org--toggle-inline-images-in-subtree beg end)
           (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate arg)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ((or `src-block `inline-src-block)
         (org-babel-execute-src-block arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--toggle-inline-images-in-subtree
                (org-element-property :begin lineage)
                (org-element-property :end lineage))
             (org-open-at-point arg))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           (+org--toggle-inline-images-in-subtree
            (org-element-property :begin context)
            (org-element-property :end context))))))))

(defun +org-get-todo-keywords-for (&optional keyword)
  "Returns the list of todo keywords that KEYWORD belongs to."
  (when keyword
    (cl-loop for (type . keyword-spec)
             in (cl-remove-if-not #'listp org-todo-keywords)
             for keywords =
             (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                     (match-string 1 x)
                                   x))
                     keyword-spec)
             if (eq type 'sequence)
             if (member keyword keywords)
             return keywords)))

(defun +org--toggle-inline-images-in-subtree (&optional beg end refresh)
  "Refresh inline image previews in the current heading/tree."
  (let ((beg (or beg
                 (if (org-before-first-heading-p)
                     (line-beginning-position)
                   (save-excursion (org-back-to-heading) (point)))))
        (end (or end
                 (if (org-before-first-heading-p)
                     (line-end-position)
                   (save-excursion (org-end-of-subtree) (point)))))
        (overlays (cl-remove-if-not (lambda (ov) (overlay-get ov 'org-image-overlay))
                                    (ignore-errors (overlays-in beg end)))))
    (dolist (ov overlays nil)
      (delete-overlay ov)
      (setq org-inline-image-overlays (delete ov org-inline-image-overlays)))
    (when (or refresh (not overlays))
      (org-display-inline-images t t beg end)
      t)))
#+end_src

*** Evil

#+begin_src emacs-lisp
(setup (:pkg evil-org)
  (:load-after org)
  (:hook-into org-mode org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-set-key-theme '(navigation todo insert textobjects additional))
  (evil-org-agenda-set-keys))
#+end_src

** Looks

*** Fonts

#+begin_src emacs-lisp
(setup org-faces
  (:also-load org-indent)
  (:when-loaded
    (set-face-attribute 'org-document-title nil :font "Roboto" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Roboto" :weight 'medium :height (cdr face)))

    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch) :height 0.6)
    (set-face-attribute 'org-drawer nil :inherit '(shadow fixed-pitch) :height 0.6)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)))
#+end_src

*** Bulletpoints

#+begin_src emacs-lisp
(setup (:pkg org-superstar)
  (:load-after org)
  (:hook-into org-mode)
  (:option
   org-superstar-remove-leading-stars t
   org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Appear

#+begin_src emacs-lisp
(setup (:pkg org-appear)
  (:hook-into org-mode))
#+end_src

*** Column

#+begin_src emacs-lisp
(setup (:pkg visual-fill-column)
  (:hook-into org-mode)
  (:option visual-fill-column-width 110
           visual-fill-column-center-text t))
#+end_src

*** File load hook

#+begin_src emacs-lisp
(defun mal/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode)
  (visual-line-mode 1)
  (auto-fill-mode 0)
  (display-line-numbers-mode 0)
  (text-scale-set 1)
  (setq line-spacing 3))
#+end_src

** Snippets

#+begin_src emacs-lisp
(setup org-tempo
  (:when-loaded
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))))
#+end_src

** Paste clipboard image

#+begin_src emacs-lisp
(defun org-insert-clipboard-image ()
  "Insert an image from the clipboard, placing the png in the same directory and inserting a link into the current (org) document"
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-nondirectory (buffer-file-name))
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (shell-command (concat "xclip -l 0 -selection clipboard -t image/png -o > \"" filename "\""))
  (insert (concat "[[./" filename "]]"))
  (org-display-inline-images))
#+end_src

** Babel languages

#+begin_src emacs-lisp
(setup (:pkg org)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ledger . t))))
#+end_src

** Auto-Tangle configuration file

#+begin_src emacs-lisp
(defun mal/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/code/dots/share/emacs.d/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle-file (buffer-file-name)))))

(setup org-mode
  (:hook (lambda () (add-hook 'after-save-hook #'mal/org-babel-tangle-config))))
#+end_src

* Development

** Direnv

Pretty much necessary for Nix - use lorri.

#+begin_src emacs-lisp
(setup (:pkg direnv)
  (:option direnv-always-show-summary nil)
  (direnv-mode))
#+end_src

** Language Servers

#+begin_src emacs-lisp
(setup (:pkg lsp-mode)
  (:option lsp-keymap-prefix "C-l"
           lsp-lens-enable nil
           lsp-signature-render-documentation nil
           lsp-enable-which-key-integration t))
#+end_src

*** LSP UI

#+begin_src emacs-lisp
(setup (:pkg lsp-ui)
  (:hook-into lsp-mode)
  (:option lsp-ui-doc-position 'bottom
           lsp-ui-sideline-show-hover nil
           lsp-ui-doc-enable t
           lsp-ui-peek-always-show t))
#+end_src

*** Flycheck

#+begin_src emacs-lisp
(setup (:pkg flycheck)
  (global-flycheck-mode))
#+end_src

*** LSP Ivy

#+begin_src emacs-lisp
(setup (:pkg lsp-ivy))
#+end_src

** Rust

#+begin_src emacs-lisp
(setup (:pkg rustic)
  (:option rustic-format-on-save nil))
#+end_src

